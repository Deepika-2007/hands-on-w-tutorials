# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64"
  config.vm.hostname = "cnilab"
  config.vm.define vm_name = 'cnilab'

  lab_env = ENV.fetch('LAB', true)
  ovs_env = ENV.fetch('OVS', false)
  cni_env = ENV.fetch('CNI', true)

$hands_on = <<SHELL
set -e -x -u
echo "=== Setup Environment ==="
sudo apt-get update
sudo apt-get install -y git nfs-common ntp jq bats httpie silversearcher-ag vim cmake tcpdump unzip tig socat traceroute
sudo apt-get -y -qq install clang doxygen hugepages build-essential libnuma-dev libpcap-dev inux-headers-`uname -r` dh-autoreconf libssl-dev libcap-ng-dev openssl python python-pip htop bridge-utils
SHELL

$apt_openvswitch = <<SHELL
set -e -x -u
sudo apt-get update && sudo apt-get install -y openvswitch-switch
SHELL

$cni_hands_on = <<SHELL
mkdir ~/cni-hands-on
cd ~/cni-hands-on && curl -O -L https://github.com/containernetworking/plugins/releases/download/v0.6.0/cni-plugins-amd64-v0.6.0.tgz
cd ~/cni-hands-on && curl -O -L https://github.com/containernetworking/cni/releases/download/v0.6.0/cni-amd64-v0.6.0.tgz
cd ~/cni-hands-on && tar -zxf cni-amd64-v0.6.0.tgz
cd ~/cni-hands-on && tar -zxf cni-plugins-amd64-v0.6.0.tgz
rm -rf ~/cni-hands-on/cni-plugins-amd64-v0.6.0.tgz ~/cni-hands-on/cni-amd64-v0.6.0.tgz
cat > ~/cni-hands-on/mybridge.conf.tmp <<"EOF"
{
    "cniVersion": "0.2.0",
    "name": "mynet",
    "type": "",
    "bridge": "",
    "isGateway": true,
    "ipMasq": true,
    "ipam": {
        "type": "host-local",
        "subnet": "10.23.0.0/24",
        "routes": [
            { "dst": "0.0.0.0/0" }
        ]
    }
}
EOF
cat > ~/cni-hands-on/loopback.conf <<"EOF"
{
    "cniVersion": "0.2.0",
    "type": "loopback"
}
EOF
SHELL

  # In order to simulate multiple interfaces
  # enp0s8
  config.vm.network :private_network, ip: "172.17.8.100"
  # enp0s9
  config.vm.network :private_network, ip: "172.17.8.50"

  if lab_env == true
     config.vm.provision "shell", privileged: false, inline: $hands_on
  end
  if ovs_env == true
     config.vm.provision "shell", privileged: false, inline: $apt_openvswitch
  end
  if cni_env == true
     config.vm.provision "shell", privileged: false, inline: $cni_hands_on
  end

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |v|
     # Display the VirtualBox GUI when booting the machine
      v.customize ["modifyvm", :id, "--cpus", 2]
      v.customize ["modifyvm", :id, "--memory", 3072]
      v.customize ['modifyvm', :id, '--nicpromisc2', 'allow-all']
      v.customize ["setextradata", :id, "VBoxInternal/CPUM/SSE4.1", "1"]
      v.customize ["setextradata", :id, "VBoxInternal/CPUM/SSE4.2", "1"]
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
